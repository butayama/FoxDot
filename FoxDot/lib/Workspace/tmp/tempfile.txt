lead_pattern1 = P[_, 2, _, 5, _, 5, _, 2]

lead_pattern2 = P[_, 4, _, 4, _, 7, _, 7]

lead_pattern3 = P[_, 7, _, 7, _, 2, _, 2]

lead_pattern4 = P[_, 5, _, 5, _, 7, _, 7]

bass_pattern1 = P[7, 9, 11, 11, _, 7, 2, 2]

bass_pattern1 = P[7, 9, 11, 11, _, 7, 2, 2]

def lead_change(a=0):
    if a%3 == 0:
        p1 >> pads(Pvar([lead_pattern1, lead_pattern2], 4), dur=1, sud=1/4)
        print("change 3")
    if a%5 == 0:
        p1 >> pads(Pvar([lead_pattern3, lead_pattern4], 4), dur=1, sud=1/4
        print("change 5")
        
def bass_change(a=0):
    if a%3 == 0:
        p1 >> pads(Pvar([pattern1, pattern2], 4), dur=1)
        print("change 3")
    if a%5 == 0:
        p1 >> bass(Pvar([pattern1, pattern2], 4), dur=1/2)
        print("change 5")   

var.counter = var(0)

@PlayerMethod
def test(self, a = 5):
    change(a)
    var.counter += 1
    print(var.counter)

@PlayerMethod
def test0(self):
    print(self.degree)

p1 >> pluck([0,4]).every(4, "test0")

p1 >> pluck([0,4,2]).every(4, "tset0", 4)

p2 >> play("Xx-t").every(4, "test", var.counter)

# And cancel it with
p2.never("test")

p1.never("test0")

clear()